//--------------------------------------------------
// [Responsive]
//--------------------------------------------------

// usage : @include screen-desktop {...}
@mixin screen-desktop {
  @media only screen and (min-width: 1440px) {
    @content;
  }
}

// usage : @include screen-laptop-above {...}
@mixin screen-laptop-above {
  @media only screen and (min-width: 1440px) {
    @content;
  }
}

// usage : @include screen-laptop {...}
@mixin screen-laptop {
  @media only screen and (max-width: 1440px) {
    @content;
  }
}

// usage : @include screen-laptop-only {...}
@mixin screen-laptop-only {
  @media only screen and (min-width: 992px) and (max-width: 1440px) {
    @content;
  }
}

// usage : @include screen-tablet-above {...}
@mixin screen-tablet-above {
  @media only screen and (min-width: 992px) {
    @content;
  }
}

// usage : @include screen-tablet {...}
@mixin screen-tablet {
  @media only screen and (max-width: 992px) {
    @content;
  }
}

// usage : @include screen-mobile-above {...}
@mixin screen-mobile-above {
  @media only screen and (min-width: 767px) {
    @content;
  }
}

// usage : @include screen-mobile {...}
@mixin screen-mobile {
  @media only screen and (max-width: 767px) {
    @content;
  }
}

// usage : @include print {...}
@mixin print {
  @media print {
    @content;
  }
}

//--------------------------------------------------
// [Transform]
//--------------------------------------------------

// usage : @include transform(translateX(-50%) translateY(-50%));
@mixin transform($transforms) {
  transform: $transforms;
  -webkit-transform: $transforms;
  -moz-transform: $transforms;
  -o-transform: $transforms;
  -ms-transform: $transforms;
}

//--------------------------------------------------
// [Transform Origin]
//--------------------------------------------------

// eg: @include transform-origin(left center);
@mixin transform-origin($val) {
  -webkit-transform-origin: $val;
  -moz-transform-origin: $val;
  -ms-transform-origin: $val;
  transform-origin: $val;
}

//--------------------------------------------------
// [Transition]
//--------------------------------------------------

// eg: @include transition(all 0.4s ease-in-out);
@mixin transition($transition) {
  transition: $transition;
  -webkit-transition: $transition;
  -moz-transition: $transition;
  -o-transition: $transition;
  -ms-transition: $transition;
}

//--------------------------------------------------
// [Box Shadow Inset]
//--------------------------------------------------

// usage: @include box-shadow(0, 1px, 1px, rgba(0, 0, 0, 0.075), inset);
@mixin box-shadow($top, $left, $blur, $color, $inset: "") {
  -webkit-box-shadow: $top $left $blur $color #{$inset};
  -moz-box-shadow: $top $left $blur $color #{$inset};
  box-shadow: $top $left $blur $color #{$inset};
}

//--------------------------------------------------
// [Box Shadow Outer]
//--------------------------------------------------

// usage: @include box-shadow(0, 1px, 1px, rgba(0, 0, 0, 0.075));
@mixin box-shadow-outer($top, $left, $blur, $color) {
  -webkit-box-shadow: $top $left $blur $color;
  -moz-box-shadow: $top $left $blur $color;
  box-shadow: $top $left $blur $color;
}

//--------------------------------------------------
// [Text Masking]
//--------------------------------------------------

// usage : @include gradient-text-masking;
@mixin gradient-text-masking {
  background-clip: text;
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
}

//--------------------------------------------------
// [Clearfix]
//--------------------------------------------------
@mixin clearfix {
  &:before,
  &:after {
    content: " ";
    display: table;
  }

  &:after {
    clear: both;
  }
}

//--------------------------------------------------
//DEPRECIATED - USE CSS-ALPHA
// [Background Color Opacity]
//--------------------------------------------------

// usage : @include background-opacity($default-dark, 0.5);
@mixin background-opacity($color, $opacity: 0.3) {
  background: $color; /* The Fallback */
  background: rgba($color, $opacity);
  @warn 'The "background-opacity"  is deprecated, pls use css-alpha()';

}

//--------------------------------------------------
// [Color Alpha]
//--------------------------------------------------

//usasge: @include alpha-attribute('color', rgba(black, 0.5), white);
@mixin alpha-attribute($attribute, $color, $background) {
  $percent: alpha($color) * 100%;
  $opaque: opacify($color, 1);
  $solid-color: mix($opaque, $background, $percent);
  #{$attribute}: $solid-color;
  #{$attribute}: $color;
  @warn 'The "alpha-attribute"  is deprecated, pls use css-alpha()';

}

//--------------------------------------------------
// [Animation & Keyframe]
//--------------------------------------------------

// usage: @include keyframes(spin) {0% { transform: rotate(0); } 100% { transform: rotate(360deg); }}
@mixin keyframes($animation-name) {
  @-webkit-keyframes #{$animation-name} {
    @content;
  }
  @-moz-keyframes #{$animation-name} {
    @content;
  }
  @-ms-keyframes #{$animation-name} {
    @content;
  }
  @-o-keyframes #{$animation-name} {
    @content;
  }
  @keyframes #{$animation-name} {
    @content;
  }
}

// usage: @include animation('spin 1.2s backwards infinite')
@mixin animation($str) {
  -webkit-animation: #{$str};
  -moz-animation: #{$str};
  -ms-animation: #{$str};
  -o-animation: #{$str};
  animation: #{$str};
}

//--------------------------------------------------
// [Placeholder]
//--------------------------------------------------

// usage: @include placeholder {font-size: 10px;}
@mixin placeholder {
  &::-webkit-input-placeholder {
    @content;
  }
  &:-moz-placeholder {
    @content;
  }
  &::-moz-placeholder {
    @content;
  }
  &:-ms-input-placeholder {
    @content;
  }
}

//--------------------------------------------------
//DEPRECIATED - USE CSS-ALPHA
// [RGBA Background Opacity]
//--------------------------------------------------

// usage: @include bg-opacity($color-dark, .2);
@mixin bg-opacity($color, $opacity: 0.3) {
  background: rgba($color, $opacity);
  @warn 'The "bg-opacity" is deprecated, pls use css-alpha()';

}


//--------------------------------------------------
// [Grayscale]
//--------------------------------------------------

// usage: @include grayscale(100%);
@mixin grayscale($gray) {
  -webkit-filter: grayscale($gray);
  -moz-filter: grayscale($gray);
  filter: grayscale($gray);
}

//--------------------------------------------------
// [Blur]
//--------------------------------------------------

// usage: @include blur(5px);
@mixin blur($gray) {
  -webkit-filter: blur($gray);
  -moz-filter: blur($gray);
  filter: blur($gray);
}

//--------------------------------------------------
// Background Gradient
//--------------------------------------------------

//usage: @include gradient(#ff00ff, #ff00cc, vertical | horizontal | radial);
@mixin gradient($start-color, $end-color, $orientation) {
  background: $start-color;
  @if $orientation == vertical {
    // vertical
    background: -moz-linear-gradient(top, $start-color 0%, $end-color 100%);
    background: -webkit-gradient(
      linear,
      left top,
      left bottom,
      color-stop(0%, $start-color),
      color-stop(100%, $end-color)
    );
    background: -webkit-linear-gradient(top, $start-color 0%, $end-color 100%);
    background: -o-linear-gradient(top, $start-color 0%, $end-color 100%);
    background: -ms-linear-gradient(top, $start-color 0%, $end-color 100%);
    background: linear-gradient(to bottom, $start-color 0%, $end-color 100%);
    filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='$start-color', endColorstr='$end-color',GradientType=0 );
  } @else if $orientation == horizontal {
    // horizontal
    background: -moz-linear-gradient(left, $start-color 0%, $end-color 100%);
    background: -webkit-gradient(
      linear,
      left top,
      right top,
      color-stop(0%, $start-color),
      color-stop(100%, $end-color)
    );
    background: -webkit-linear-gradient(left, $start-color 0%, $end-color 100%);
    background: -o-linear-gradient(left, $start-color 0%, $end-color 100%);
    background: -ms-linear-gradient(left, $start-color 0%, $end-color 100%);
    background: linear-gradient(to right, $start-color 0%, $end-color 100%);
    filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='$start-color', endColorstr='$end-color',GradientType=1 );
  } @else {
    // radial
    background: -moz-radial-gradient(center, ellipse cover, $start-color 0%, $end-color 100%);
    background: -webkit-gradient(
      radial,
      center center,
      0px,
      center center,
      100%,
      color-stop(0%, $start-color),
      color-stop(100%, $end-color)
    );
    background: -webkit-radial-gradient(center, ellipse cover, $start-color 0%, $end-color 100%);
    background: -o-radial-gradient(center, ellipse cover, $start-color 0%, $end-color 100%);
    background: -ms-radial-gradient(center, ellipse cover, $start-color 0%, $end-color 100%);
    background: radial-gradient(ellipse at center, $start-color 0%, $end-color 100%);
    filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='$start-color', endColorstr='$end-color',GradientType=1 );
  }
}

//--------------------------------------------------
// Text Truncate
//--------------------------------------------------
// Requires inline-block or block for proper styling
//usage: @include text-truncate();

@mixin text-truncate() {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

//--------------------------------------------------
// Background color for components. For background.scss
//--------------------------------------------------
//usage: @include bg-variant(".bg-theme", $brand-theme);

@mixin bg-variant($parent, $color) {
  #{$parent} {
    background-color: $color !important;
  }

  a#{$parent} {
    &:hover, &:focus {
     // background-color: css-lightness($color, 10%); //Unable to work inside mixin. 
      opacity:0.85; //temporarily solution
    }
  }
}

//--------------------------------------------------
// Replace substring with another string
//--------------------------------------------------
// credits: https://css-tricks.com/snippets/sass/str-replace-function/
@function str-replace($string, $search, $replace: '') {
  $index: str-index($string, $search);
  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
  }
  @return $string;
}

//--------------------------------------------------
// css-lightness for CSS Variable
//--------------------------------------------------
// Must Use this to replaced css-lightness/lighten if your project uses CSS Variable as Brand Color.
//usage: css-lightness(brand-primary , 10%);  //lighten
//usage: css-lightness(brand-primary , -20%);  //css-lightness
@function css-lightness($color, $diff){
  $str: #{$color};
  //remove % and negative value
  $str-diff: str-replace(#{$diff}, '%');
  $str-diff2: str-replace(#{$str-diff}, '-');

  //Detect CSS variable.
  @if (str-index($str,'var') != null){
    $color: str-replace($color, 'var(');
    $color: str-replace($color, ')');
    $color-h: unquote('var('+ #{$color+'-h)'});
    $color-s: unquote('var('+ #{$color+'-s)'});
    $color-l: unquote('var('+ #{$color+'-l)'});

    @if $diff > 0 {
        @return hsl($color-h, $color-s, calc(#{$color-l} + #{$str-diff + '%'}));
     }@else {
        @return hsl($color-h, $color-s, calc(#{$color-l} - #{$str-diff2 + '%'}));
     }
  }
   @else{
     @if $diff > 0 {
         @return lighten($color, $diff);
    } @else {
         @return css-lightness($color, -$diff);
    }
 }
}
//--------------------------------------------------
// css-alpha for CSS Variable
//--------------------------------------------------
@function css-alpha($color, $alpha){
  $str: #{$color};
  @if (str-index($str,'var') != null){

    $color: str-replace($color, 'var(');
    $color: str-replace($color, ')');
    $color-h: unquote('var('+ #{$color+'-h)'});
    $color-s: unquote('var('+ #{$color+'-s)'});
    $color-l: unquote('var('+ #{$color+'-l)'});

    @return hsla($color-h, $color-s, $color-l, $alpha);
  }
   @else {
    @return rgba($color, $alpha);
  }
}


